extends layout

block content

	div(class="container login")
		div(style="float: left;" class="share-container")
			a(href="/search")
				img(src="/images/yoke.jpg", alt="The Yoke",  title="Yoke", class="yokelogo")
			h1= 'Share.'
			if(myshares == "")
				h4="You are currently not sharing any agent."
			if(myshares != "")
				h4="You are currently sharing."
				p="An administrator has uploaded the following agents on your behalf."
				div(id="results")
					div(id="ctl00_Div2" class="row rank")
						div(class="table-responsive")               
							table(id="rankTbl" class="table")
								thead
									tr(class="you info-best" style="font-weight: bold")
										th(class="desktabonly")= 'id'
										th(class="wrapped")!= 'Agent'
										th= 'Vendor'
										th= 'Catalog#'
								tbody
									-var ob = myshares
									- var pageCount = 0
									-for(var prop in ob)
										tr(class="")
											td(class="desktabonly") #{prop}
											td(class="wrapped") #{ob[prop].agent}
											td #{ob[prop].vendor}
											td #{ob[prop].catalognumber}
							script.
								$(document).ready(function() {
									$('#rankTbl').DataTable();
								});
			if(isLoggedInAdmin == 1)
				div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
				h4="Admin Upload."
				p="You can now upload a list of agents (xcel spreadsheet) from your local computer or Google drive."
				form(id="uploadForm", enctype="multipart/form-data", action="share", method="post")
					input(style="display:none", type="file" name="file",id="file", class="inputfile inputfile-1", data-multiple-caption="{count} files selected")
					label(for="file", style="width: 50%;text-align: center;border-radius: 6px;")
						svg(xmlns="http://www.w3.org/2000/svg", width="20", height="17", viewBox="0 0 20 17")
							path(d="M10 0l-5.2 4.9h3.3v5.1h3.8v-5.1h3.3l-5.2-4.9zm9.3 11.5l-3.2-2.1h-2l3.4 2.6h-3.5c-.1 0-.2.1-.2.1l-.8 2.3h-6l-.8-2.2c-.1-.1-.1-.2-.2-.2h-3.6l3.4-2.6h-2l-3.2 2.1c-.4.3-.7 1-.6 1.5l.6 3.1c.1.5.7.9 1.2.9h16.3c.6 0 1.1-.4 1.3-.9l.6-3.1c.1-.5-.2-1.2-.7-1.5z")
						span="Choose an Excel File..."
					div(class="buttons")
						button.btn.btn-success.btn-lg.btn-block(type="submit",value="Upload",name="submit") Upload File
						img(src="images/ship.png", alt="The Lab", title="Lab", style="border-width:0px; width: 50px; margin-top: -50px; margin-left: 300px;")

		if json
			div(id="results")
				div(id="ctl00_Div2" class="row rank")
					div(class="table-responsive")
						span(style="text-align: center")
							h3="Fantastic! You have uploaded the file: "
								span(style="color: #3d9dcb;")=" " + spreadname                   
						table(id="rankTbl" class="table")
							tbody
								tr(class="you info-best" style="font-weight: bold")
									td(class="desktabonly")= 'id'
									td(class="wrapped")!= 'Agent'
									td= 'Vendor'
									td= 'Catalog#'
									td= 'Location'
								-var ob = json
								-for(var prop in ob)
									tr(class="")
										td(class="desktabonly") #{prop}
										td(class="wrapped") #{ob[prop].name_of_reagent}
										td #{ob[prop].vendor}
										td #{ob[prop].catalog_number}
										td #{ob[prop].location}
			div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
		div(style="float:right; padding-left: 20px", class="share-container")
			script(type="text/javascript" src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js")
			div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
			h4="A brief Line report of the monthly shares."
			p="This graph depicts the number of shares per Agent Category (line chart)."
			div(class="ct-chart ct-perfect-fourth")
			div(id="tooltips", class="labColor") &nbsp;
			h4="Another brief Bar report of the monthly shares."
			p="This graph depicts the number of shares per Agent Category (bar chart)."
			div(class="ct-chart0 ct-perfect-fourth")
			div(id="tooltips0", class="labColor") &nbsp;
			div(style="padding-top:25px;", class="") &nbsp;
			- var array_rows = []
			- var array_values = ""
			-var ob = report_sharesbycategory
			-for(var prop in ob)
				- array_rows = array_rows + ob[prop].category + "|"
				- array_values = array_values + ob[prop].count + "|"

			script.
				var values = "#{array_values}";
				values = values.split("|");
				var valTransform = [];
				for(var prop in values){
					valTransform.push(values[prop]);
				}
				var rows = "#{array_rows}";
				rows = rows.split("|");
				var rowTransform = [];
				for(var prop in rows){
					rowTransform.push(rows[prop]);
				}
				console.log("more rowTransform trans: " + rowTransform)
				var data = {
					labels: rowTransform,
					series: [
						valTransform
					]
				};
				/*
				var options = {
					width: 300,
					height: 200
				};*/

				var responsiveOptions = [
					['(max-width: 440px)', {
						width: 300,
						height: 200
					}],
					['(max-width: 767px)', {
						width: 500,
						height: 200
					}],
					['(min-width: 990px)', {
						width: 300,
						height: 200
					}]
				];

				var chart0 = new Chartist.Bar('.ct-chart0', data, responsiveOptions);

				var chart = new Chartist.Line('.ct-chart', data, responsiveOptions);

				// Let's put a sequence number aside so we can use it in the event callbacks
				var seq = 0,
				delays = 50,
				durations = 300;

				// Once the chart is fully created we reset the sequence
				chart.on('created', function() {
					seq = 0;
				});

				// On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
				chart.on('draw', function(data) {
					seq++;

					if(data.type === 'line') {
						// If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
						data.element.animate({
							opacity: {
								// The delay when we like to start the animation
								begin: seq * delays + 1000,
								// Duration of the animation
								dur: durations,
								// The value where the animation should start
								from: 0,
								// The value where it should end
								to: 1
							}
						});
					} else if(data.type === 'label' && data.axis === 'x') {
						data.element.animate({
							y: {
								begin: seq * delays,
								dur: durations,
								from: data.y + 100,
								to: data.y,
								// We can specify an easing function from Chartist.Svg.Easing
								easing: 'easeOutQuart'
							}
						});
					} else if(data.type === 'label' && data.axis === 'y') {
						data.element.animate({
							x: {
								begin: seq * delays,
								dur: durations,
								from: data.x - 100,
								to: data.x,
								easing: 'easeOutQuart'
							}
						});
					} else if(data.type === 'point') {
						data.element.animate({
							x1: {
								begin: seq * delays,
								dur: durations,
								from: data.x - 10,
								to: data.x,
								easing: 'easeOutQuart'
							},
							x2: {
								begin: seq * delays,
								dur: durations,
								from: data.x - 10,
								to: data.x,
								easing: 'easeOutQuart'
							},
							opacity: {
								begin: seq * delays,
								dur: durations,
								from: 0,
								to: 1,
								easing: 'easeOutQuart'
							}
						});
					} else if(data.type === 'grid') {
					// Using data.axis we get x or y which we can use to construct our animation definition objects
						var pos1Animation = {
							begin: seq * delays,
							dur: durations,
							from: data[data.axis.units.pos + '1'] - 30,
							to: data[data.axis.units.pos + '1'],
							easing: 'easeOutQuart'
						};

						var pos2Animation = {
							begin: seq * delays,
							dur: durations,
							from: data[data.axis.units.pos + '2'] - 100,
							to: data[data.axis.units.pos + '2'],
							easing: 'easeOutQuart'
						};

						var animations = {};
						animations[data.axis.units.pos + '1'] = pos1Animation;
						animations[data.axis.units.pos + '2'] = pos2Animation;
						animations['opacity'] = {
							begin: seq * delays,
							dur: durations,
							from: 0,
							to: 1,
							easing: 'easeOutQuart'
						};

						data.element.animate(animations);
					}
				});

				// For the sake of the example we update the chart every time it's created with a delay of 10 seconds
				/*chart.on('created', function() {
					if(window.__exampleAnimateTimeout) {
						clearTimeout(window.__exampleAnimateTimeout);
						window.__exampleAnimateTimeout = null;
					}
					window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
				});*/
				
				var addedEvents = false;
				chart.on('draw', function() {
					if (!addedEvents) {
						$('.ct-point').on('mouseover', function() {
							$('#tooltips').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
						});

						$('.ct-point').on('mouseout', function() {
							$('#tooltips').html("&nbsp;")
						});
					}
				});
				var addedEvents0 = false;
				chart0.on('draw', function() {
					if (!addedEvents0) {
						$('.ct-bar').on('mouseover', function() {
							$('#tooltips0').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
						});

						$('.ct-bar').on('mouseout', function() {
							$('#tooltips0').html("&nbsp;")
						});
					}
				});

					
