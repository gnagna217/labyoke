extends layout

block content

	style.
		body {
			background:#ffffff;
			padding:0;
			margin:0;
			font-weight: bold;
			overflow:hidden;
		}

		#info {
			position: absolute;
			top: 0px; width: 100%;
			color: #ffffff;
			padding: 5px;
			font-family:Monospace;
			font-size:13px;
			text-align:center;
			z-index:1000;
		}

		a {
			color: #ffffff;
		}

		#oldie a { color:#da0 }

	script(src="/javascripts/threejs/build/three.js")

	script(src="/javascripts/threejs/examples/js/effects/AnaglyphEffect.js")

	script(src="/javascripts/threejs/examples/js/Detector.js")

	script(src="/javascripts/threejs/threex.dynamictexture.js")

	script.

		/*if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

		var container;

		var data = ["Hi", "There", "Hello", "Again","Welcome", "Back"];

		var camera, scene, renderer, effect;

		var mesh, lightMesh, geometry;
		var spheres = [];

		var directionalLight, pointLight;

		var mouseX = 0;
		var mouseY = 0;

		var windowHalfX = window.innerWidth / 2;
		var windowHalfY = window.innerHeight / 2;

		document.addEventListener( 'mousemove', onDocumentMouseMove, false );

		init();
		animate();

		function init() {

			container = document.createElement( 'div' );
			document.body.appendChild( container );

			camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.01, 100 );
			camera.position.z = 3;
			camera.focalLength = 3;

			var path = "/images/three/";
			var format = '.png';
			var urls = [
				path + 'px_' + format, path + 'nx_' + format,
				path + 'py_' + format, path + 'ny_' + format,
				path + 'pz_' + format, path + 'nz_' + format
			];

			var textureCube = new THREE.CubeTextureLoader().load( urls );

			scene = new THREE.Scene();
			// scene.background = textureCube;
			scene.background = new THREE.Color( "white" )

			var dynamicTexture  = new THREEx.DynamicTexture(256,256);
			// var t = new THREE.TextGeometry('bamhi');
			dynamicTexture.context.font	= "bolder 15px Verdana"
			dynamicTexture.drawText('Last Transactions', 48, 128, 'white');

			var dynamicTexture1  = new THREEx.DynamicTexture(256,256);
			//var t = new THREE.TextGeometry('exosome');
			dynamicTexture1.context.font	= "bolder 25px Verdana"
			dynamicTexture1.drawText('exosome', 48, 128, 'white');

			var dynamicTexture2  = new THREEx.DynamicTexture(256,256);
			//var t = new THREE.TextGeometry('reactif more than chem');
			dynamicTexture2.context.font	= "bolder 25px Verdana"
			dynamicTexture2.drawText('reactif more than chem', 48, 128, 'white');

			var geometry = new THREE.SphereBufferGeometry( 0.15, 32, 32);
			//var geometry = new THREE.SphereBufferGeometry( 0.1, 32, 16 );
			var material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );
			// var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );
			// map: THREE.ImageUtils.loadTexture('/images/three/px.png') 
			// var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube, map : dynamicTexture.texture } );

			var prop = 0;
			for ( var i = 0; i < 20; i ++ ) {
				material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture2.texture } );
				//dynamicTexture.texture.needsUpdate  = true
				if(i%2==0){
					material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );
				}
				if(i%3==0){
					material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture1.texture } );
				}
				var proptext = data[prop];
				console.log("prop: " + proptext);
				//dynamicTexture.clear('');
				//dynamicTexture.drawText(proptext, 48, 128, 'white');
				//prop++;
				//material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );

				var mesh = new THREE.Mesh( geometry, material );

				mesh.position.x = Math.random() * 10 - 5;
				mesh.position.y = Math.random() * 10 - 5;
				mesh.position.z = Math.random() * 10 - 5;

				mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

				scene.add( mesh );

				spheres.push( mesh );

			}

			//

			renderer = new THREE.WebGLRenderer( { antialias: false } );
			renderer.setClearColor( 0xffffff );
			renderer.setPixelRatio( window.devicePixelRatio );
			container.appendChild( renderer.domElement );

			var width = window.innerWidth || 2;
			var height = window.innerHeight || 2;

			effect = new THREE.AnaglyphEffect( renderer );
			effect.setSize( width, height );

			//

			window.addEventListener( 'resize', onWindowResize, false );

		}

		function onWindowResize() {

			windowHalfX = window.innerWidth / 2;
			windowHalfY = window.innerHeight / 2;

			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			effect.setSize( window.innerWidth, window.innerHeight );

		}

		function onDocumentMouseMove(event) {

			mouseX = ( event.clientX - windowHalfX ) / 100;
			mouseY = ( event.clientY - windowHalfY ) / 100;

		}

		//

		function animate() {

			requestAnimationFrame( animate );

			render();

		}

		function render() {

			var timer = 0.0001 * Date.now();

			camera.position.x += ( mouseX - camera.position.x ) * .05;
			camera.position.y += ( - mouseY - camera.position.y ) * .05;

			camera.lookAt( scene.position );

			for ( var i = 0, il = spheres.length; i < il; i ++ ) {

				var sphere = spheres[ i ];

				sphere.position.x = 5 * Math.cos( timer + i );
				sphere.position.y = 5 * Math.sin( timer + i * 1.1 );

			}

			effect.render( scene, camera );

		}*/

		var scene = new THREE.Scene();
		scene.background = new THREE.Color( "white" );
		var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 1, 10000);

		var renderer = new THREE.WebGLRenderer( { antialias: true } );
		renderer.setSize(window.innerWidth, window.innerHeight);
		renderer.setClearColor( 0xffffff );
		document.body.appendChild(renderer.domElement);

		var geometry = /*new THREE.BoxGeometry(700, 700, 700, 10, 10, 10)*/ new THREE.SphereBufferGeometry( 400, 32, 32);

		var dynamicTexture  = new THREEx.DynamicTexture(256,256);
		dynamicTexture.context.font	= "normal 45px Verdana"
		dynamicTexture.drawText('Last Transactions', 64, 128, 'white');

		var material = new THREE.MeshBasicMaterial({color: 0xffffff, wireframe: false, map: dynamicTexture.texture});
		var cube = new THREE.Mesh(geometry, material);
		scene.add(cube);

		camera.position.z = 1000;			

		function render() {
		requestAnimationFrame(render);

		cube.rotation.x += 0.01;
		cube.rotation.y += 0.01;

		renderer.render(scene, camera);
		};

		render();