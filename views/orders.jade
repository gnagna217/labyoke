extends layout

block content
    div(id="pageloader")
      div(class="spinner")
        div(class="bounce1")
        div(class="bounce2")
        div(class="bounce3")
    div(class="container login marginbottom margintop container2 moveFromLeft")
      - var classContainer = ""
      - var widthnodata = ""
      - if(orderresults == "")
        - widthnodata = "width:100%;"
      if email == undefined
         - classContainer = "/*min-height: 1000px;*/"
      div(style="float: left;" + widthnodata class="order-container" id="order-container")
            h1= i18n.__("orders.title")
            if(orderresults == "")
              h4!= i18n.__("orders.non.title")
              p!= i18n.__("orders.non.subtitle")
              div(class="searchlogo", style="margin-top:50px")
                span(class="fa fa-circle-thin roue1" style="")
                img(src="/images/cart.png", alt="The Yoke",  title="Yoke", style="width: 200px;margin-top: 20px;")
                span(class="fa fa-circle-thin roue2")
            if(orderresults != "" && email == undefined)
              p!=i18n.__("orders.subdesc")
              div(id="results2", class="resultsshadow")
                div(id="ctl00_Div2" class="row rank")
                  div(class="table-responsive")               
                    table(id="rankTblOrders" class="rankTbl table  animated fadeInUp")
                      thead
                        tr(class="you info-best" style="font-weight: bold")
                          th(class="desktabonly")= i18n.__("orders.table.id")
                          th(class="wrapped")!= i18n.__("orders.table.reagent")
                          th= i18n.__("orders.table.vendor")
                          th(class="desktabonly")= i18n.__("orders.table.catalog")
                          th= i18n.__("orders.table.email")
                          th= i18n.__("orders.table.date")
                      tbody
                        - var i = 0
                        -var ob = orderresults
                        -for(var prop in ob)
                          - var d = ob[prop].date
                          - var insuff = ob[prop].insufficient
                          - d = d.toLocaleDateString("en-US")
                          - var n = ob[prop].status
                          - var isnew = ""
                          - if(insuff == 0)
                             - isnew = "yokeBackColor"
                          - if(n != "fulfilled")
                             - isnew = "isnew"
                          - //var mod = prop % 2
                          - //isnew += " animated fadeInUp"
                          - //if(mod == 0)
                            - //isnew += " animated fadeInUp"
                          - i = i + 1
                          tr(class=isnew)
                            td(class="desktabonly")= i
                            td(class="wrapped2") #{ob[prop].agent}
                            td(class="wrapped2") #{ob[prop].vendor}
                            td(class="wrapped2 desktabonly") #{ob[prop].catalognumber}
                            td(class="wrapped2") #{ob[prop].email}
                            td #{d}
                    script.
                      $(document).ready(function() {
                        $('#rankTblOrders').DataTable({order: [[ 5, "desc" ]],
                          iDisplayLength: 5,
                          aLengthMenu: [[5, 10, 15, -1], [5, 10, 15, "All"]],
                          language:{
                          processing: "#{i18n.__("datatable.processing")}",
                          search: "#{i18n.__("datatable.search")}",
                          lengthMenu: "#{i18n.__("datatable.lengthMenu")}",
                          info: "#{i18n.__("datatable.info")}",
                          infoEmpty: "#{i18n.__("datatable.infoEmpty")}",
                          infoFiltered: "#{i18n.__("datatable.infoFiltered")}",
                          infoPostFix: "",
                          loadingRecords: "#{i18n.__("datatable.loadingRecords")}",
                          zeroRecords: "#{i18n.__("datatable.zeroRecords")}",
                          emptyTable: "#{i18n.__("datatable.emptyTable")}",
                          paginate: {
                          first: "#{i18n.__("datatable.first")}",
                          previous: "#{i18n.__("datatable.previous")}",
                          next: "#{i18n.__("datatable.next")}",
                          last: "#{i18n.__("datatable.last")}",
                          searchPlaceholder: "#{i18n.__("datatable.searchplaceholder")}"
                          },
                          aria: {
                          sortAscending: "#{i18n.__("datatable.sortAscending")}",
                          sortDescending: "#{i18n.__("datatable.sortDescending")}"
                          }
                          }
                        });
                        var win = $( window ).width();
                        console.log(win);
                        if(win < 767){
                          $("#order-container").css( "min-height", "0px" );
                        }
                        $("#rankTblOrders").css( "width", "100%" );
                        
                      });
      div(class="slide-out-tip-div desktabonly", style="display:none;z-index:1;position: fixed;top: 25% !important;max-height:400px;")
        a(class="handle" href="last-transactions", title='#{i18n.__("search.tip.header")}', style="right: -60px;,left:-85px;top:25px;")!=Content
        div(style="padding: 4px;color:white;top: -45px;position: relative;")
            p(style="font-size: 12pt;")!= i18n.__("orders.tip.header")
            div(style="position: relative;float: right;width: 250px;font-size: 9pt;line-height: 1.3;border-radius: 4px;max-height:320px;overflow:auto;")
              span!= i18n.__("orders.tip.desc")
      script.
         $(function(){
             $('.slide-out-tip-div').tabSlideOut({
                 imgPos: 115,
                 tabHandle: '.handle',                              //class of the element that will be your tab
                 pathToTabImage: 'images/bouee3.png',          //path to the image for the tab (optionaly can be set using css)
                 imageHeight: '50px',                               //height of tab image
                 imageWidth: '50px',                               //width of tab image    
                 tabLocation: 'right',                               //side of screen where tab lives, top, right, bottom, or left
                 speed: 300,                                        //speed of animation
                 action: 'click',                                   //options: 'click' or 'hover', action to trigger animation
                 topPos: '25% !important',                                   //position from the top
                 fixedPosition: true                               //options: true makes it stick(fixed position) on scroll
             });
         });

      if(orderresults != "" && email == undefined)
        div(style="float:right; padding-left: 25px", class="share-container adjustpadding adjustpaddingrightandwidth")
          script(type="text/javascript" src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js")
          if(orderresults != "" && email == undefined)
            div(class="alert alert-orders alert-" + boostercolor + " fade in alert-dismissable order-container /*alertshadow*/",style="margin-top:50px;width:100%")
              a(href="#", class="close", data-dismiss="alert", aria-label="close", title="close")="x"
              span!= booster          
          div(class="threepointssep")
          h3(style="padding-top: 25px;")
            span(class="fa fa-bar-chart" style=" color: #337ab7; margin-right: 10px;")
            span= i18n.__("orders.chart.title")
          form(action="chartSelect", method="post")
            div(class="buttons")
              select(name="chartSelect" type="text" id="chartSelect" class="form-control" style="border-color:#3d9dcb;margin-bottom:10px;width: 97%;" placeholder=i18n.__("orders.chart.select"))
                option(value="chartNone",style="font-weight:bold")= i18n.__("orders.chart.option1")
                option(value="chartQty")= i18n.__("orders.chart.option2")
                option(value="chartOrders")= i18n.__("orders.chart.option3")
                option(value="chartLabs")= i18n.__("orders.chart.option4")
              span(class="fa fa-sort" style="color: #8a6d3b; float: right; top: -35px; left: -27px; position: relative; font-size: 14pt; ")
          div(id="chartNotes", style="display:none")
            p!= i18n.__("orders.chart.notes")
          - var find0 = report_sharesbycategory
          - var find1 = test
          - var find2 = laborders
          - var now = new Date()
          - var count = 0;
          - var filteroutput = test.filter(function(x){console.log("x.monthorder: "+x.monthorder); console.log("x.yearorder: "+x.yearorder); console.log("now.getFullYear(): "+ now.getFullYear()); console.log("now.getMonth(): "+ now.getMonth()); console.log("so: "+ (x.yearorder == now.getFullYear() && x.monthorder == (now.getMonth() + 1))); if(x.yearorder == now.getFullYear() && x.monthorder == (now.getMonth() + 1)){count++;} console.log("count is: "+count); if(count<6){return (x.yearorder == now.getFullYear() && x.monthorder == (now.getMonth() + 1))}});
          script.
            console.log("find0: " + ("#{find0}" != null && "#{find0}" != undefined && ("#{find0}").length > 0));
            window.onload = function() {
            $('#labsComp').hide();
            $('#monthComp').hide();
            $('#qtyComp').hide();

            $('#chartSelect').val('chartQty');

            var eSelect = document.getElementById('chartSelect');
            console.debug("selected: " + $('#chartSelect').val());

            if(chartSelect.selectedIndex === 1 || $('#chartSelect').val() == 'chartQty') {
              $('#chartNotes').hide();
              console.log("chartQty inside");
              $('#qtyComp').show();

              if("#{find0}" != null && "#{find0}" != undefined && ("#{find0}").length > 0)
                document.querySelector('.ct-chart1').__chartist__.update();
              $('#monthComp').hide();
              $('#labsComp').hide();
            } else if(chartSelect.selectedIndex === 2 || $('#reportSelect').val() == 'chartOrders') {
              $('#chartNotes').hide();
              console.log("chartOrders inside");
              $('#qtyComp').hide();
              $('#monthComp').show();
              if("#{filteroutput}" != null && "#{filteroutput}" != undefined && ("#{filteroutput}").length > 0)
                document.querySelector('.ct-chart0').__chartist__.update();
              $('#labsComp').hide();
            } else if(chartSelect.selectedIndex === 3 || $('#reportSelect').val() == 'chartLabs') {
              $('#chartNotes').hide();
              console.log("chartLabs inside");
              $('#qtyComp').hide();
              $('#monthComp').hide();
              $('#labsComp').show();
              if("#{find2}" != null && "#{find2}" != undefined && ("#{find2}").length > 0)
                document.querySelector('.ct-chart-3').__chartist__.update();
            } else if(eSelect.selectedIndex === 0 || $('#reportSelect').val() == 'chartNone') {
              console.log("result None inside");
              $('#qtyComp').hide();
              $('#monthComp').hide();
              $('#labsComp').hide();
              $('#chartNotes').show();
            }

            chartSelect.onchange = function() {
            if(chartSelect.selectedIndex === 1 || $('#chartSelect').val() == 'chartQty') {
              console.log("chartQty inside");
              $('#chartNotes').hide();
              $('#qtyComp').show();
              if("#{find0}" != null && "#{find0}" != undefined && ("#{find0}").length > 0)
                document.querySelector('.ct-chart1').__chartist__.update();
              $('#monthComp').hide();
              $('#labsComp').hide();
            } else if(chartSelect.selectedIndex === 2 || $('#reportSelect').val() == 'chartOrders') {
              console.log("chartOrders inside");
              $('#chartNotes').hide();
              $('#qtyComp').hide();
              $('#monthComp').show();
              if("#{filteroutput}" != null && "#{filteroutput}" != undefined && ("#{filteroutput}").length > 0)
                document.querySelector('.ct-chart0').__chartist__.update();
              $('#labsComp').hide();
            } else if(chartSelect.selectedIndex === 3 || $('#reportSelect').val() == 'chartLabs') {
              console.log("chartLabs inside");
              $('#chartNotes').hide();
              $('#qtyComp').hide();
              $('#monthComp').hide();
              $('#labsComp').show();
              if("#{find2}" != null && "#{find2}" != undefined && ("#{find2}").length > 0)
                document.querySelector('.ct-chart3').__chartist__.update();
            } else if(eSelect.selectedIndex === 0 || $('#reportSelect').val() == 'chartNone') {
              console.log("result None inside");
              $('#qtyComp').hide();
              $('#monthComp').hide();
              $('#labsComp').hide();
              $('#chartNotes').show();
            }            
            };

            };



          div(id="qtyComp", style="display:none")
            h4!= i18n.__("orders.qty.title1") + currentlabname + i18n.__("orders.qty.title2")
            - if(report_sharesbycategory != null && report_sharesbycategory.length >0)
              p!= i18n.__("orders.qty.subtitle")
              
              div(class="ct-chart1 ct-perfect-fourth")
              div(id="tooltips", class="labColor") &nbsp;
            - if(report_sharesbycategory != null && report_sharesbycategory.length==0)
              h5!= i18n.__("orders.qty.subtitle1")
          div(id="monthComp", style="display:none")
            - // var now = new Date()
            - // var filteroutput = test.filter(function(x){console.log("x.monthorder: "+x.monthorder); console.log("x.yearorder: "+x.yearorder); console.log("now.getFullYear(): "+ now.getFullYear()); console.log("now.getMonth(): "+ now.getMonth()); console.log("so: "+ (x.yearorder == now.getFullYear() && x.monthorder == now.getMonth())); return (x.yearorder == now.getFullYear() && x.monthorder == now.getMonth() + 1)});
            h4= i18n.__("orders.month.title")
            - if(filteroutput != null && filteroutput.length > 0) 
               p!= i18n.__("orders.month.subtitle1")
               div(class="ct-chart0 ct-perfect-fourth")
               div(id="tooltips0", class="labColor") &nbsp;
            - if(filteroutput != null && filteroutput.length == 0) 
               h5
                 span= i18n.__("orders.month.subtitle2")
          div(id="labsComp", style="display:none")
            //- if(filteroutput != null && filteroutput.length == 0) 
            // h5= i18n.__("orders.month.subtitle2")
            h4= i18n.__("orders.month.subtitle3")
            p!= i18n.__("orders.month.subtitle4")
            - if(laborders != null && laborders.length > 0)
               div(class="ct-chart3 ct-perfect-fourth")
               div(id="tooltips3", class="labColor") &nbsp;
            - if(laborders != null && laborders.length == 0) 
             h5= i18n.__("orders.month.subtitle5")
          
          - var array_rows = []
          - var array_values = ""
          - var array_rows2 = []
          - var array_values2 = ""
          - var array_rows3 = []
          - var array_values3 = ""
          - var categorieslist = ""
          
          -var cat = categories
          -for(var prop in cat)
            - categorieslist = categorieslist + cat[prop].agent + "|"
          -var ob = report_sharesbycategory
          -for(var prop in ob)
            - array_rows = array_rows + ob[prop].agent + "|"
            - array_values = array_values + ob[prop].counting + "|"

          -var ob3 = report_ordersbycategory
          -for(var prop in ob3)
            - array_rows3 = array_rows3 + ob3[prop].agent + "|"
            - array_values3 = array_values3 + ob3[prop].counting + "|"

          -var ob2 = filteroutput
          -for(var prop in ob2)
            - array_rows2 = array_rows2 + ob2[prop].agent + "|"
            - array_values2 = array_values2 + ob2[prop].counting + "|"
          
          - var arraylabRowsStr = "";
          - var arraylabValuesStr = "";
          - if(laborders != null && laborders.length > 0)
            - for(var prop in laborders)
              - var array_rows5 = []
              - var array_values5 = ""
              - if(laborders[prop].lab != null)
                 - arraylabRowsStr = arraylabRowsStr + laborders[prop].lab + "|"
                 - arraylabValuesStr = arraylabValuesStr + laborders[prop].counting + "|"

          script.
            console.log("row: " + "#{arraylabRowsStr}")

            console.log("val: " + "#{arraylabValuesStr}")

            var values3 = "#{arraylabValuesStr}";
            var series = [];
            var rows = [];
            values3 = values3.split("|");
            
            for(var prop in values3){
              var valTransform3 = [];
              var i = values3[prop];
              if(i){
              valTransform3.push(i);
              series.push(i);
              }
            }

            var rows4 = "#{arraylabRowsStr}";
            rows4 = rows4.split("|");
            for(var prop in rows4){
             var i = rows4[prop];
              if(i){
               rows.push(i);
             }
            }

            console.log("more rows: " + rows)
            console.log("more series: " + series)
            var data = {
              labels: rows,
              series: series
            };

            var options = {distributeSeries: true};
            console.log("series : " + series);
            if(series != null && series.length > 0){
            var chart3 = new Chartist.Bar('.ct-chart3', data, options);
            var addedEvents3 = false;
            chart3.on('draw', function() {
              if (!addedEvents3) {
                $('.ct-chart3').find('.ct-bar').on('mouseover', function() {
                  $('#tooltips3').html(("#{i18n.__("dot.selected")}").replace(/&lt;/g, '<').replace(/&gt;/g, '>') + $(this).attr('ct:value'));
                });

                $('.ct-chart3').find('.ct-bar').on('mouseout', function() {
                  $('#tooltips3').html("&nbsp;")
                });
              }
            });
            }



          script.
            var categories = "#{categorieslist}";
            categories = categories.split("|");
            var catTransform = [""];
            var catTransformLimit = [];
            var valTransform = [];
            var valTransformOrders = [];
            for(var prop in categories){
              //catTransform.push((categories[prop]).toLowerCase());
              //valTransform.push(0);
              //valTransformOrders.push(0);
            }

            var rows = "#{array_rows}";
            rows = rows.split("|");
            var rowTransform = [];

            var rowsOrders = "#{array_rows3}";
            rowsOrders = rowsOrders.split("|");
            var rowTransformOrders = [];
            var i = 11;
            for(var prop in rowsOrders){
              if(i > 0){
                rowTransformOrders.push(rowsOrders[prop]);
                console.log("i_1: " + i);
                
                catTransform.push((rowsOrders[prop]).toLowerCase());
                valTransform.push(0);
                
                valTransformOrders.push(0);
                i--;
              }
                
            }
            console.log("previous catTransform: " + catTransform);

            var c = 0;
            
            catTransform.pop();
            console.log("catTransform pop: " + catTransform);
            
            for(var prop in rows){
              rowTransform.push(rows[prop]);
              console.log("i_2: " + i);
              if(catTransform.indexOf((rows[prop]).toLowerCase()) == -1){
                console.log("rows[prop]: " + (rows[prop]).toLowerCase() + ".");
                if((rows[prop]).length >0){
                if(i > 0){
                catTransform.push((rows[prop]).toLowerCase());
                valTransform.push(0);
                
                valTransformOrders.push(0);
                i--;
              }
                }
              }
            }
            
            console.log("last catTransform: " + catTransform);

            var values = "#{array_values}";
            values = values.split("|");
            
            var count = 0;
            for(var prop in catTransform){
            //if(count < 11){
            //    count++;
            var cat = (catTransform[prop]).toLowerCase();
            var r = rowTransform[prop];
            catTransformLimit.push(cat);
             console.log("share: " + cat + " - "+ r);
             if(r != undefined){
             console.log("share0: " + catTransform.indexOf(r.toLowerCase()));
             }
              if(r != undefined && catTransform.indexOf(r.toLowerCase()) != -1){
              //valTransform.push(values[prop]);
              valTransform[catTransform.indexOf(r.toLowerCase())]=values[prop];
              } /*else {
              valTransform.push(0);
              }*/
             //}
            }



            var valuesorders = "#{array_values3}";
            valuesorders = valuesorders.split("|");
            
            count = 0;
            for(var prop in catTransform){
             // if(count < 11){
               // count++;
                var cat = (catTransform[prop]).toLowerCase();
                var r = rowTransformOrders[prop];
                console.log("order: " + cat + " - "+ r);
                if(r != undefined){
                console.log("order0: " + catTransform.indexOf(r.toLowerCase()));
                }
                if(r != undefined && catTransform.indexOf(r.toLowerCase()) != -1){
                //valTransformOrders.push(valuesorders[prop]);
                valTransformOrders[catTransform.indexOf(r.toLowerCase())]=valuesorders[prop];
                } /*else {
                valTransformOrders.push(0);
                }*/
             // }
            }

            console.log("chart orders  valTransformOrders: " + valTransformOrders);
            console.log("chart orders  rowTransformOrders: " + rowTransformOrders);
            console.log("chart shares valTransform: " + valTransform);
            console.log("chart shares rowTransform: " + rowTransform);
            console.log("chart categories: " + categories);

            console.log("more rowTransform trans: " + rowTransform)
            var data = {
              labels: catTransformLimit,
              series: [
                valTransform, valTransformOrders
              ]
            };
            var values2 = "#{array_values2}";
            values2 = values2.split("|");
            var valTransform2 = [];
            for(var prop in values2){
              valTransform2.push(values2[prop]);
            }
            var rows2 = "#{array_rows2}";
            rows2 = rows2.split("|");
            var rowTransform2 = [];
            for(var prop in rows2){
             rowTransform2.push(rows2[prop]);
            }
            console.log("more valTransform2 trans: " + valTransform2)
            console.log("more rowTransform2 trans: " + rowTransform2)
            var data2 = {
              labels: rowTransform2,
              series: [
               valTransform2
              ]
            };
            var responsiveOptions = [
              ['(max-width: 440px)', {
                width: 300,
                height: 200
              }],
              ['(max-width: 767px)', {
                width: 500,
                height: 200
              }],
              ['(min-width: 990px)', {
                width: 300,
                height: 200
              }]
            ];
            console.log("values2 : " + values2);
            if(values2 != null && values2 != ""){
            var chart0 = new Chartist.Bar('.ct-chart0', data2, responsiveOptions);
            var addedEvents0 = false;
            chart0.on('draw', function() {
              if (!addedEvents0) {
                $('.ct-chart0').find('.ct-bar').on('mouseover', function() {
                  $('#tooltips0').html(("#{i18n.__("dot.selected")}").replace(/&lt;/g, '<').replace(/&gt;/g, '>') + $(this).attr('ct:value'));
                });

                $('.ct-chart0').find('.ct-bar').on('mouseout', function() {
                  $('#tooltips0').html("&nbsp;")
                });
              }
            });
            }

            console.log("values : " + values);
            if(values != null && values != ""){
            var chart = new Chartist.Line('.ct-chart1', data, responsiveOptions);
            var addedEvents = false;
            chart.on('draw', function() {
              if (!addedEvents) {
                $('.ct-point').on('mouseover', function() {
                  //$('#tooltips').show();
                  var findvalue = $(this).attr('ct:value');
                  var xis = $(this).attr('x2');
                  console.log("xis: " + xis);
                  var roundxis = (Math.floor(xis * 100))/100;
                  console.log("roundxis: " + roundxis);
                  var findx = $("foreignObject").filter(function( index ) {
                    console.log('inside round: ' + (Math.round($( this ).attr( "x" ) * 100))/100  );
                    console.log('inside floo: ' + (Math.floor($( this ).attr( "x" ) * 100))/100  );
                    return ((Math.round($( this ).attr( "x" ) * 100))/100)  == roundxis || ((Math.round($( this ).attr( "x" ) * 100))/100)  == (roundxis + 10) || ((Math.floor($( this ).attr( "x" ) * 100))/100)  == roundxis || ((Math.floor($( this ).attr( "x" ) * 100))/100)  == (roundxis + 10);
                  }); 
                  //$("foreignObject[x=roundxis]");
                  console.log("findx: " + findx.attr('x'));
                  var label = findx.find('.ct-label').html();
                  console.log("label: " + label);
                  if(label != undefined && label.length > 0)
                    $('#tooltips').html(("#{i18n.__("dot.selected")}").replace(/&lt;/g, '<').replace(/&gt;/g, '>')  + $(this).attr('ct:value') + ("#{i18n.__("dot.reagent")}").replace(/&lt;/g, '<').replace(/&gt;/g, '>') + label);
                });

                $('.ct-point').on('mouseout', function() {
                  //$('#tooltips').hide();
                  $('#tooltips').html("&nbsp;")
                });
              }
            });
            // Let's put a sequence number aside so we can use it in the event callbacks
            var seq = 0,
            delays = 50,
            durations = 300;

            // Once the chart is fully created we reset the sequence
            chart.on('created', function() {
              seq = 0;
            });

            // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
            chart.on('draw', function(data) {
              seq++;

              if(data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                  opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                  }
                });
              } else if(data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                  y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                  x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'point') {
                data.element.animate({
                  x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'grid') {
              // Using data.axis we get x or y which we can use to construct our animation definition objects
                var pos1Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '1'] - 30,
                  to: data[data.axis.units.pos + '1'],
                  easing: 'easeOutQuart'
                };

                var pos2Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '2'] - 100,
                  to: data[data.axis.units.pos + '2'],
                  easing: 'easeOutQuart'
                };

                var animations = {};
                animations[data.axis.units.pos + '1'] = pos1Animation;
                animations[data.axis.units.pos + '2'] = pos2Animation;
                animations['opacity'] = {
                  begin: seq * delays,
                  dur: durations,
                  from: 0,
                  to: 1,
                  easing: 'easeOutQuart'
                };

                data.element.animate(animations);
              }
            });
            }
      span(class="desktabonly", id="checkdisplay")
      script.
        $( document ).ready(function() {
          console.log( "orders document loaded" );
          if ($("#checkdisplay").css("display") == "none" ){
            $('.slide-out-tip-div').hide();
          } else {
            $('.slide-out-tip-div').show();
          }
          $('#chartNotes').show();
          $('#qtyComp').show();
          $('#monthComp').show();
          $('#labsComp').show();
        });