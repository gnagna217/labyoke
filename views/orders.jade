extends layout

block content


    div(class="container login")
      - var classContainer = ""
      if email == undefined
         - classContainer = "min-height: 900px;"
      div(style="float: left;" + classContainer class="order-container" id="order-container")
            a(href="/search")
                img(src="/images/yoke4.png", alt="The Yoke",  title="Yoke", class="yokelogo")
            h1= 'Orders.'
            if(orderresults == "")
              p="You have not ordered any agent yet! Click on the "
                a(href='/search')="Search"
                span=" button and start labyoking!"
            if(orderresults != "" && email == undefined)
              p="Incredible! You have ordered the following agents so far:"
              div(id="results")
                div(id="ctl00_Div2" class="row rank")
                  div(class="table-responsive")               
                    table(id="rankTblOrders" class="rankTbl table")
                      thead
                        tr(class="you info-best" style="font-weight: bold")
                          th(class="desktabonly")= 'id '
                          th(class="wrapped")!= 'Agent'
                          th= 'Vendor'
                          th(class="desktabonly")= 'Catalog'
                          th= 'Date'
                      tbody
                        - var i = 0
                        -var ob = orderresults
                        -for(var prop in ob)
                          - var d = ob[prop].date
                          - d = d.toLocaleDateString("en-US")
                          - var n = ob[prop].status
                          - var isnew = ""
                          - if(n == "new")
                             - isnew = "isnew"
                          - i = i + 1
                          tr(class=isnew)
                            td(class="desktabonly")= i
                            td(class="wrapped") #{ob[prop].agent}
                            td #{ob[prop].vendor}
                            td(class="desktabonly") #{ob[prop].catalognumber}
                            td #{d}
                    script.
                      $(document).ready(function() {
                        $('#rankTblOrders').DataTable();
                        var win = $( window ).width();
                        console.log(win);
                        if(win < 767){
                          $("#order-container").css( "min-height", "0px" );
                        }
                        $("#rankTblOrders").css( "width", "100%" );
                        
                      });
      if(orderresults != "" && email == undefined)
        div(style="float:right; padding-left: 20px", class="share-container adjustpadding")
          script(type="text/javascript" src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js")
          div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
          h4="A brief Line report of the monthly orders."
          p="This line graph depicts your total number of orders per Agent Category:"
          - if(report_sharesbycategory != null && report_sharesbycategory.length >0)
             div(class="ct-chart ct-perfect-fourth")
             div(id="tooltips", class="labColor") &nbsp;
          - var now = new Date()
          - var filteroutput = test.filter(function(x){console.log("x.monthorder: "+x.monthorder); console.log("x.yearorder: "+x.yearorder); console.log("now.getFullYear(): "+ now.getFullYear()); console.log("now.getMonth(): "+ now.getMonth()); console.log("so: "+ (x.yearorder == now.getFullYear() && x.monthorder == now.getMonth())); return (x.yearorder == now.getFullYear() && x.monthorder == now.getMonth() + 1)});
          - if(report_sharesbycategory != null && report_sharesbycategory.length==0)
           h5="You have not ordered any agent. "
            a(href="/search")
              span(class="labColot")="Search now."
          h4="A brief Bar report of the monthly orders."
          p="This bar chart depicts your number of orders this month (so far) per Agent Category:"
          - if(filteroutput != null && filteroutput.length > 0) 
             div(class="ct-chart0 ct-perfect-fourth")
             div(id="tooltips0", class="labColor") &nbsp;
          - if(filteroutput != null && filteroutput.length == 0) 
           h5="You have not ordered any agent this month."
          h4="A brief Bar report of all orders in each lab."
          p="This bar chart depicts the number of orders (so far) per lab:"
          - if(laborders != null && laborders.length > 0)
             div(class="ct-chart3 ct-perfect-fourth")
             div(id="tooltips3", class="labColor") &nbsp;
          - if(laborders != null && laborders.length == 0) 
           h5="No agent has been ordered in any lab so far."
          
          - var array_rows = []
          - var array_values = ""
          - var array_rows2 = []
          - var array_values2 = ""

          -var ob = report_sharesbycategory
          -for(var prop in ob)
            - array_rows = array_rows + ob[prop].category + "|"
            - array_values = array_values + ob[prop].count + "|"
          -var ob2 = filteroutput
          -for(var prop in ob2)
            - array_rows2 = array_rows2 + ob2[prop].category + "|"
            - array_values2 = array_values2 + ob2[prop].counting + "|"
          
          - var arraylabRows = [];
          - var arraylabValues = [];
          - var arraylabRowsStr = "";
          - var arraylabValuesStr = "";
          - if(laborders != null && laborders.length > 0)
            - for(var prop in laborders)
              - var array_rows5 = []
              - var array_values5 = ""           
              - array_rows5 = array_rows5 + laborders[prop].lab + "|"
              - array_values5 = array_values5 + laborders[prop].counting + "|"
              - arraylabRows.push(array_rows5)
              - arraylabValues.push(array_values5)
            -for(var prop in arraylabRows)
              - arraylabRowsStr = arraylabRowsStr + arraylabRows[prop]+ ";"
            -for(var prop in arraylabValues)
              - arraylabValuesStr = arraylabValuesStr + arraylabValues[prop]+ ";"
          script.
              console.log("row: " + "#{arraylabRowsStr}")

              console.log("val: " + "#{arraylabValuesStr}")

            var values3 = "#{array_values3}";
            values3 = values3.split("|");
            var valTransform3 = [];
            for(var prop in values3){
              var i = values3[prop];
              if(i){
              valTransform3.push(i);
              }
            }
            var values4 = "#{array_values4}";
            values4 = values4.split("|");
            var valTransform4 = [];
            for(var prop in values4){
              var i = values4[prop];
              if(i){
              valTransform4.push(i);
              }
            }
            var rowTransform3 = [];
            var rows4 = "#{array_rows4}";
            rows4 = rows4.split("|");
            for(var prop in rows4){
             var i = rows4[prop];
              if(i){
               rowTransform3.push(i);
             }
            }
            var rows3 = "#{array_rows3}";
            rows3 = rows3.split("|");
            for(var prop in rows3){
              var i = rows3[prop];
              if(i){
                rowTransform3.push(i);
              }
            }
            console.log("more valTransform3 trans: " + valTransform3)
            console.log("more valTransform4 trans: " + valTransform4)
            console.log("more rowTransform3 trans: " + rowTransform3)
            var data3 = {
              labels: rowTransform3,
              series: [
               valTransform4, valTransform3
              ]
            };
 

            var responsiveOptions = [
              ['(max-width: 440px)', {
                width: 300,
                height: 200
              }],
              ['(max-width: 767px)', {
                width: 500,
                height: 200
              }],
              ['(min-width: 990px)', {
                width: 300,
                height: 200
              }]
            ];

            console.log("values3 : " + values3);
            if(values3 != null && values3 != ""){
            var chart3 = new Chartist.Bar('.ct-chart3', data3, responsiveOptions);
            }

            if(values3 != "" && values3 != ""){
            var addedEvents3 = false;
            chart3.on('draw', function() {
              if (!addedEvents3) {
                $('.ct-bar').on('mouseover', function() {
                  $('#tooltips3').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
                });

                $('.ct-bar').on('mouseout', function() {
                  $('#tooltips3').html("&nbsp;")
                });
              }
            });
            }



          script.
            var values = "#{array_values}";
            values = values.split("|");
            var valTransform = [];
            for(var prop in values){
              valTransform.push(values[prop]);
            }
            var rows = "#{array_rows}";
            rows = rows.split("|");
            var rowTransform = [];
            for(var prop in rows){
              rowTransform.push(rows[prop]);
            }
            console.log("more rowTransform trans: " + rowTransform)
            var data = {
              labels: rowTransform,
              series: [
                valTransform
              ]
            };
            var values2 = "#{array_values2}";
            values2 = values2.split("|");
            var valTransform2 = [];
            for(var prop in values2){
              valTransform2.push(values2[prop]);
            }
            var rows2 = "#{array_rows2}";
            rows2 = rows2.split("|");
            var rowTransform2 = [];
            for(var prop in rows2){
             rowTransform2.push(rows2[prop]);
            }
            console.log("more valTransform2 trans: " + valTransform2)
            console.log("more rowTransform2 trans: " + rowTransform2)
            var data2 = {
              labels: rowTransform2,
              series: [
               valTransform2
              ]
            };
            var responsiveOptions = [
              ['(max-width: 440px)', {
                width: 300,
                height: 200
              }],
              ['(max-width: 767px)', {
                width: 500,
                height: 200
              }],
              ['(min-width: 990px)', {
                width: 300,
                height: 200
              }]
            ];
            console.log("values2 : " + values2);
            if(values2 != null && values2 != ""){
            var chart0 = new Chartist.Bar('.ct-chart0', data2, responsiveOptions);
            }
            /*console.log("values3 : " + values3);
            if(values3 != null && values3 != ""){
            var chart3 = new Chartist.Bar('.ct-chart3', data3, responsiveOptions);
            }*/
            console.log("values : " + values);
            if(values != null && values != ""){
            var chart = new Chartist.Line('.ct-chart', data, responsiveOptions);

            // Let's put a sequence number aside so we can use it in the event callbacks
            var seq = 0,
            delays = 50,
            durations = 300;

            // Once the chart is fully created we reset the sequence
            chart.on('created', function() {
              seq = 0;
            });

            // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
            chart.on('draw', function(data) {
              seq++;

              if(data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                  opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                  }
                });
              } else if(data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                  y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                  x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'point') {
                data.element.animate({
                  x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'grid') {
              // Using data.axis we get x or y which we can use to construct our animation definition objects
                var pos1Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '1'] - 30,
                  to: data[data.axis.units.pos + '1'],
                  easing: 'easeOutQuart'
                };

                var pos2Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '2'] - 100,
                  to: data[data.axis.units.pos + '2'],
                  easing: 'easeOutQuart'
                };

                var animations = {};
                animations[data.axis.units.pos + '1'] = pos1Animation;
                animations[data.axis.units.pos + '2'] = pos2Animation;
                animations['opacity'] = {
                  begin: seq * delays,
                  dur: durations,
                  from: 0,
                  to: 1,
                  easing: 'easeOutQuart'
                };

                data.element.animate(animations);
              }
            });
            }

            // For the sake of the example we update the chart every time it's created with a delay of 10 seconds
            /*chart.on('created', function() {
              if(window.__exampleAnimateTimeout) {
                clearTimeout(window.__exampleAnimateTimeout);
                window.__exampleAnimateTimeout = null;
              }
              window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
            });*/
            if(values != "" && values != ""){
            var addedEvents = false;
            chart.on('draw', function() {
              if (!addedEvents) {
                $('.ct-point').on('mouseover', function() {
                  //$('#tooltips').show();
                  $('#tooltips').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
                });

                $('.ct-point').on('mouseout', function() {
                  //$('#tooltips').hide();
                  $('#tooltips').html("&nbsp;")
                });
              }
            });
            }
            if(values2 != "" && values2 != ""){
            var addedEvents0 = false;
            chart0.on('draw', function() {
              if (!addedEvents0) {
                $('.ct-bar').on('mouseover', function() {
                  $('#tooltips0').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
                });

                $('.ct-bar').on('mouseout', function() {
                  $('#tooltips0').html("&nbsp;")
                });
              }
            });
            }
            /*if(values3 != "" && values3 != ""){
            var addedEvents3 = false;
            chart3.on('draw', function() {
              if (!addedEvents3) {
                $('.ct-bar').on('mouseover', function() {
                  $('#tooltips3').html('<b>Selected Value: </b>' + $(this).attr('ct:value'));
                });

                $('.ct-bar').on('mouseout', function() {
                  $('#tooltips3').html("&nbsp;")
                });
              }
            });
            }*/

      if email != undefined
        h3="Great! You have ordered the following agent from "
          span(style="color: #3d9dcb;")=" " + location
          span="!"
        p=" "
        p
          b="Agent: "
          span=agent
          br
          b="Catalog: "
          span=catalog
          br
          b="Vendor: "
          span=vendor
      if(orderresults != "" && email == undefined)
        div(class="alert alert-success fade in alert-dismissable order-container",style="margin-top:18px;float: right;")
          a(href="#", class="close", data-dismiss="alert", aria-label="close", title="close")="x"
          strong="Major Achievement!"
          span=" You have saved your lab over $1000 dollars for the past 4 months. Not so real. Work in Progress."
        div(class="alert alert-success fade in alert-dismissable order-container",style="margin-top:18px;float: right;")
          a(href="#", class="close", data-dismiss="alert", aria-label="close", title="close")="x"
          strong="Another Major Achievement!"
          span=" You have saved the WORLD over $10,000 dollars for the past month. Not so real. Work in Progress."
