extends layout

block content


    div(class="container login")
        div(style="float: left;" class="order-container")
            a(href="/search")
                img(src="/images/yoke.jpg", alt="The Yoke",  title="Yoke", class="yokelogo")
            h1= 'Orders.'
            if(orderresults == "")
              p="You have not ordered any agent yet! Click on the "
                a(href='/search')="Search"
                span=" button and start labyoking!"
            if(orderresults != "" && email == undefined)
              p="Incredible! You have ordered the following agents so far:"
              div(id="results")
                div(id="ctl00_Div2" class="row rank")
                  div(class="table-responsive")               
                    table(id="rankTbl" class="table")
                      tbody
                        tr(class="you info-best" style="font-weight: bold")
                          td(class="desktabonly")= 'id'
                          td(class="wrapped")!= 'Agent'
                          td= 'Vendor'
                          td= 'Catalog#'
                          td= 'Date'
                        - var i = 0
                        -var ob = orderresults
                        -for(var prop in ob)
                          - var d = ob[prop].date
                          - d = d.toLocaleDateString("en-US")
                          - i = i + 1
                          tr(class="")
                            td(class="desktabonly")= i
                            td(class="wrapped") #{ob[prop].agent}
                            td #{ob[prop].vendor}
                            td #{ob[prop].catalognumber}
                            td #{d}
      if(orderresults != "" && email == undefined)
        div(style="float:right; padding-left: 20px", class="share-container")
          script(type="text/javascript" src="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.js")
          div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
          h4="A brief Line report of the monthly shares."
          p="This graph depicts the number of orders per Agent Category (line chart)."
          div(class="ct-chart ct-perfect-fourth")
          h4="Another brief Bar report of the monthly shares."
          p="This graph depicts the number of orders per Agent Category (bar chart)."
          div(class="ct-chart0 ct-perfect-fourth")
          - var array_rows = []
          - var array_values = ""
          -var ob = report_sharesbycategory
          -for(var prop in ob)
            - array_rows = array_rows + ob[prop].category + "|"
            - array_values = array_values + ob[prop].count + "|"

          script.
            var values = "#{array_values}";
            values = values.split("|");
            var valTransform = [];
            for(var prop in values){
              valTransform.push(values[prop]);
            }
            var rows = "#{array_rows}";
            rows = rows.split("|");
            var rowTransform = [];
            for(var prop in rows){
              rowTransform.push(rows[prop]);
            }
            console.log("more rowTransform trans: " + rowTransform)
            var data = {
              labels: rowTransform,
              series: [
                valTransform
              ]
            };
            /*
            var options = {
              width: 300,
              height: 200
            };*/

            var responsiveOptions = [
              ['(max-width: 440px)', {
                width: 300,
                height: 200
              }],
              ['(max-width: 767px)', {
                width: 500,
                height: 200
              }],
              ['(min-width: 990px)', {
                width: 300,
                height: 200
              }]
            ];

            var chart0 = new Chartist.Bar('.ct-chart0', data, responsiveOptions);

            var chart = new Chartist.Line('.ct-chart', data, responsiveOptions);

            // Let's put a sequence number aside so we can use it in the event callbacks
            var seq = 0,
            delays = 80,
            durations = 500;

            // Once the chart is fully created we reset the sequence
            chart.on('created', function() {
              seq = 0;
            });

            // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
            chart.on('draw', function(data) {
              seq++;

              if(data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                  opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                  }
                });
              } else if(data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                  y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                  x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'point') {
                data.element.animate({
                  x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'grid') {
              // Using data.axis we get x or y which we can use to construct our animation definition objects
                var pos1Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '1'] - 30,
                  to: data[data.axis.units.pos + '1'],
                  easing: 'easeOutQuart'
                };

                var pos2Animation = {
                  begin: seq * delays,
                  dur: durations,
                  from: data[data.axis.units.pos + '2'] - 100,
                  to: data[data.axis.units.pos + '2'],
                  easing: 'easeOutQuart'
                };

                var animations = {};
                animations[data.axis.units.pos + '1'] = pos1Animation;
                animations[data.axis.units.pos + '2'] = pos2Animation;
                animations['opacity'] = {
                  begin: seq * delays,
                  dur: durations,
                  from: 0,
                  to: 1,
                  easing: 'easeOutQuart'
                };

                data.element.animate(animations);
              }
            });

            // For the sake of the example we update the chart every time it's created with a delay of 10 seconds
            chart.on('created', function() {
              if(window.__exampleAnimateTimeout) {
                clearTimeout(window.__exampleAnimateTimeout);
                window.__exampleAnimateTimeout = null;
              }
              window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
            });
            
            /*data = {
              series: valTransform
            };
            var sum = function(a, b) { return a + b };
            var chart1 = new Chartist.Pie('.ct-chart1', data, {
              labelInterpolationFnc: function(value) {
                return Math.round(value / data.series.reduce(sum) * 100) + '%';
              }
            });*/

        if email != undefined
          h3="Great! You have ordered the following agent from "
            span(style="color: #3d9dcb;")=" " + location
            span="!"
          p=" "
          p
            b="Agent: "
            span=agent
            br
            b="Catalog: "
            span=catalog
            br
            b="Vendor: "
            span=vendor
        if(orderresults != "" && email == undefined)
          div(class="alert alert-success fade in alert-dismissable order-container",style="margin-top:18px;float: right;")
            a(href="#", class="close", data-dismiss="alert", aria-label="close", title="close")="x"
            strong="Major Achievement!"
            span=" You have saved your lab over $1000 dollars for the past 4 months."
          div(class="alert alert-success fade in alert-dismissable order-container",style="margin-top:18px;float: right;")
            a(href="#", class="close", data-dismiss="alert", aria-label="close", title="close")="x"
            strong="Another Major Achievement!"
            span=" You have saved the WORLD over $10,000 dollars for the past month."
