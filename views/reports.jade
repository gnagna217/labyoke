extends layout

block content
	div(class="container login")
			a(href="/search")
				img(src="/images/yoke.jpg", alt="The Yoke",  title="Yoke", class="yokelogo")
			h1= 'Reports.'
			p Here are the reports that an administrator can generate and build a portfolio with. Please note that reports can only be generated on a desktop/laptop computer.

				- var now = (new Date())
				- now = (now.getMonth() + 1) + "/" + now.getDate() + "/" + now.getFullYear()
			div(class="reportShares")
				div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
				h4="All Shares report Upload."
				p="You can now retrieve a report of all shares uploaded."
				- var datefrom_shares = datefromShares
				- var dateto_shares = datetoShares
				- var file_shares = "reportShares_" + datefrom_shares + "_to_" + dateto_shares + ".pdf"
				- var message_fail_share = "Unfortunately we could not generate the report within the time frame chosen. Please try again with new dates."
				- var message_success_share = "Success! Your report has been generated for shares requested between " + datefrom_shares + " and " + dateto_shares + " then automatically downloaded in your computer."
				- if(datefromShares == null || datefromShares == undefined || datefromShares == "")
					- datefrom_shares = "all"
					- dateto_shares = ""
					- message_success_share = "Success! Your report has been generated for ALL shares and automatically downloaded in your computer."
					- file_shares = "reportShares_all.pdf" 
				if (addMessageShares == 'failure')
					div(class="alert alert-danger")!= message_fail_share
				if (addMessageShares == 'success')
					div(class="alert alert-success fade in alert-dismissable")!= message_success_share
				div
					form(action="reportShares", method="post")
						div(class="buttons")
							label(style="width: 100px;")="Date From"
							input(name="reportDateFrom" style="margin-bottom:10px" type="text" id="reportDateFrom" class="form-control")
							br
							label(style="width: 100px;")="Date To"
							input(name="reportDateTo" style="margin-bottom:10px" type="text" id="reportDateTo" class="form-control")
							button.btn.btn-success.btn-lg.btn-block(type="submit",value="Report",name="submit") Get Shares
							img(src="images/ship.png", alt="The Lab", title="Lab", style="border-width:0px; width: 50px; margin-top: -50px; margin-left: 300px;")
						if(resultsShares != null && resultsShares !="")
							script(type="text/javascript" src="/javascripts/jspdf.js")
							script(type="text/javascript" src="/javascripts/FileSaver.js")
							script.
								var ob = "#{resultsShares}"
								ob = ob.replace(/&lt;/g,"<");
								ob = ob.replace(/&gt;/g,">");

								var pdf = new jsPDF('p', 'pt', 'ledger');
								// source can be HTML-formatted string, or a reference
								// to an actual DOM element from which the text will be scraped.
								source = ob;

								// we support special element handlers. Register them with jQuery-style 
								// ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
								// There is no support for any other type of selectors 
								// (class, of compound) at this time.
								specialElementHandlers = {
									// element with id of "bypass" - jQuery style selector
									'#bypassme': function(element, renderer) {
									// true = "handled elsewhere, bypass text extraction"
									return true;
								}
								};
								margins = {
									top: 30,
									bottom: 30,
									left: 40,
									right: 40,
									width: 622
								};

								// all coords and widths are in jsPDF instance's declared units
								// 'inches' in this case
								pdf.fromHTML(
									source, // HTML string or DOM elem ref.
									margins.left, // x coord
									margins.top, {// y coord
									'width': margins.width, // max width of content on PDF
									'elementHandlers': specialElementHandlers
								},
								function(dispose) {
								// dispose: object with X, Y of the last line add to the PDF 
								//          this allow the insertion of new lines after html
								
								if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
								{
									var binaryData = [];
									binaryData.push(pdf.output());
									var blob = new Blob(binaryData, {type: "application/pdf"});
									window.open(window.URL.createObjectURL(blob),'_blank');
									//var blob = pdf.output();
									//window.open(window.URL.createObjectURL(blob),'_blank');
								}
								else
								{
									pdf.output('dataurlnewwindow');
									pdf.save("#{file_shares}");
								}

								}
								, margins);	
							- results = ""
							script="$(window).scrollTop($('.reportShares').offset().top).scrollLeft($('.reportShares').offset().left);"	
			div(class="reportOrders")
				div(style="background-color: #3d9dcb; height: 2px; margin-bottom: 30px; margin-top: 30px;")
				h4="All Orders report Upload."
				p="You can now retrieve a report of all orders requested."
				- var datefrom_orders = datefromOrders
				- var dateto_orders = datetoOrders
				- var file_orders = "reportOrders_" + datefrom_orders + "_to_" + dateto_orders + ".pdf"
				- var message_fail_order = "Unfortunately we could not generate the report within the time frame chosen. Please try again with new dates."
				- var message_success_order = "Success! Your report has been generated for orders between " + datefrom_orders + " and " + dateto_orders + " then automatically downloaded in your computer."
				- if(datefromOrders == null || datefromOrders == undefined || datefromOrders == "")
					- datefrom_orders = "all"
					- dateto_orders = ""
					- message_success_order = "Success! Your report has been generated for ALL orders and automatically downloaded in your computer."
					- file_orders = "reportOrders_all.pdf" 
				if (addMessageOrders == 'failure')
					div(class="alert alert-danger")!= message_fail_order
				if (addMessageOrders == 'success')
					div(class="alert alert-success fade in alert-dismissable")!= message_success_order
				div
					form(action="reportOrders", method="post")
						div(class="buttons")
							label(style="width: 100px;")="Date From"
							input(name="reportDateFromOrders" style="margin-bottom:10px" type="text" id="reportDateFromOrders" class="form-control")
							br
							label(style="width: 100px;")="Date To"
							input(name="reportDateToOrders" style="margin-bottom:10px" type="text" id="reportDateToOrders" class="form-control")
							button.btn.btn-success.btn-lg.btn-block(type="submit",value="Report",name="submit") Get Orders
							img(src="images/ship.png", alt="The Lab", title="Lab", style="border-width:0px; width: 50px; margin-top: -50px; margin-left: 300px;")
						span(id="triggerSafariOrder")
						if(resultsOrders != null && resultsOrders !="")
							script(type="text/javascript" src="/javascripts/jspdf.js")
							script(type="text/javascript" src="/javascripts/FileSaver.js")
							script.
								var ob = "#{resultsOrders}"
								ob = ob.replace(/&lt;/g,"<");
								ob = ob.replace(/&gt;/g,">");

								var pdf = new jsPDF('p', 'pt', 'ledger');
								// source can be HTML-formatted string, or a reference
								// to an actual DOM element from which the text will be scraped.
								source = ob;

								// we support special element handlers. Register them with jQuery-style 
								// ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
								// There is no support for any other type of selectors 
								// (class, of compound) at this time.
								specialElementHandlers = {
									// element with id of "bypass" - jQuery style selector
									'#bypassme': function(element, renderer) {
									// true = "handled elsewhere, bypass text extraction"
									return true;
								}
								};
								margins = {
									top: 30,
									bottom: 30,
									left: 40,
									right: 40,
									width: 622
								};

								// all coords and widths are in jsPDF instance's declared units
								// 'inches' in this case
								pdf.fromHTML(
									source, // HTML string or DOM elem ref.
									margins.left, // x coord
									margins.top, {// y coord
									'width': margins.width, // max width of content on PDF
									'elementHandlers': specialElementHandlers
								},
								function(dispose) {
								// dispose: object with X, Y of the last line add to the PDF 
								//          this allow the insertion of new lines after html
								if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
								{
									var binaryData = [];
									binaryData.push(pdf.output());
									var blob = new Blob(binaryData, {type: "application/pdf"});
									window.open(window.URL.createObjectURL(blob),'_blank');	
								}
								else
								{
									pdf.output('dataurlnewwindow');
									pdf.save("#{file_orders}");
								}
								
								}
								, margins);							
							- resultsOrders = ""
							script="$(window).scrollTop($('.reportOrders').offset().top).scrollLeft($('.reportOrders').offset().left);"	